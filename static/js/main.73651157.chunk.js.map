{"version":3,"sources":["components/TreeDiagram.js","components/TransitionedList.js","components/TraversalInfo.js","components/util/Dropdown.js","components/util/Tree.js","App.js","serviceWorker.js","index.js"],"names":["TreeDiagram","props","react_default","a","createElement","dist_default","data","height","width","nodeRadius","svgProps","transform","viewBox","textProps","x","y","TransitionedList","className","list","map","listItem","index","key","concat","TraversalInfo","traversal","selectedTraversal","Inorder","Preorder","Postorder","Levelorder","displayInfo","Dropdown","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","closeDropdown","setState","listOpen","state","_this2","setTimeout","window","addEventListener","removeEventListener","prevState","selectedOption","id","stateKey","handleTraversalChange","_this3","_this$props","options","title","onClick","toggleList","lib_default","name","e","stopPropagation","option","value","selectItem","selected","React","Component","Node","val","left","right","Tree","rootNode","root","visited","Error","add","dir","targetNode","arguments","length","undefined","newNode","levelorderTraversal","searchNode","queue","currentNode","push","shift","inorderTraversal","node","preorderTraversal","postorderTraversal","getTraversalOrder","App","displayList","traversalOrder","tempList","toConsumableArray","animateTree","treeData","nodeList","current","gProps","objectSpread","children","forEach","child","updateTraversalOrder","tree","_this$setState","temp","JSON","parse","stringify","item","defineProperty","resetTree","dropdownOptions","components_TreeDiagram","components_TransitionedList","Dropdown_Dropdown","components_TraversalInfo","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73651157.chunk.js","sourcesContent":["/*This component renders the tree diagram on the screen using \"react-tree-graph\" library*/\r\n\r\nimport React from \"react\";\r\nimport Tree from \"react-tree-graph\";\r\n\r\nconst TreeDiagram = props => {\r\n  return (\r\n    <div>\r\n      <Tree\r\n        data={props.data}\r\n        height={450}\r\n        width={450}\r\n        nodeRadius={15}\r\n        svgProps={{\r\n          transform: \"rotate(90)\", //rotates the tree to make it verticle\r\n          viewBox: \"-50 -10 400 400\"\r\n        }}\r\n        textProps={{\r\n          transform: \"rotate(-90)\", //rotates the text label\r\n          x: \"-20\",\r\n          y: \"2\"\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeDiagram;\r\n","/*This component renders traversal order list*/\r\n\r\nimport React from \"react\";\r\n\r\nimport \"../styles/TransitionedList.css\";\r\n\r\nconst TransitionedList = props => {\r\n  return (\r\n    <ul className=\"list-container\">\r\n      {props.list.map((listItem, index) => {\r\n        return (\r\n          <li key={`${listItem}${index}`} className=\"list-item\">\r\n            {listItem}\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TransitionedList;\r\n","import React from \"react\";\r\n\r\nimport \"../styles/TraversalInfo.css\";\r\n\r\nconst displayInfo = traversal => {\r\n  const info = {\r\n    Inorder: `1. Traverse the left subtree i.e. call Inorder(left-subtree)\\n\\n2. Visit the Node \\n\\n 3. Traverse the right subtree i.e. call Inorder(right-subtree)`,\r\n    Preorder: `1. Visit the Node \\n\\n 2. Traverse the left subtree i.e. call Preorder(left-subtree) \\n\\n 3. Traverse the right subtree i.e. call Preorder(right-subtree)`,\r\n    Postorder: `1. Traverse the left subtree i.e. call Postorder(left-subtree) \\n\\n 2. Traverse the right subtree i.e. call Postorder(right-subtree) \\n\\n 3. Visit the Node`,\r\n    Levelorder: `1. Create an empty queue \\n\\n 2. temp_node = root \\n\\n 3. Loop while temp_node is not null \\n\\n - print value of temp_node \\n\\n - Enqueue temp_node's children to Enqueue \\n\\n - Dequeue a node from queue and assign its value to temp_node`\r\n  };\r\n\r\n  return info[traversal];\r\n};\r\n\r\nconst TraversalInfo = props => {\r\n  const { selectedTraversal: traversal } = props;\r\n  return (\r\n    <div className=\"info-container\">\r\n      {traversal !== \"Select Traversal\" ? (\r\n        <span className=\"info-header\">{traversal} Traversal</span>\r\n      ) : (\r\n        <span className=\"info-header\">Choose any traversal</span>\r\n      )}\r\n      <div className=\"display-linebreak\">{displayInfo(traversal)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TraversalInfo;\r\n","/* Utility component to render custom dropdown menu\r\n\"react-fontawesome\" package is used to provide icons\r\n*/\r\n\r\nimport React from \"react\";\r\nimport FontAwesome from \"react-fontawesome\";\r\n\r\nimport \"../../styles/Dropdown.css\";\r\n\r\nexport default class Dropdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listOpen: false\r\n    };\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    setTimeout(() => {\r\n      if (this.state.listOpen) {\r\n        window.addEventListener(\"click\", this.closeDropdown);\r\n      } else {\r\n        window.removeEventListener(\"click\", this.closeDropdown);\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"click\", this.closeDropdown);\r\n  }\r\n\r\n  /*closes the dropdown menu when clicked anywhere on the screen*/\r\n  closeDropdown = () => {\r\n    this.setState({\r\n      listOpen: false\r\n    });\r\n  };\r\n\r\n  /*toggles the dropdown between open/close when clicked on its header*/\r\n  toggleList() {\r\n    this.setState(prevState => ({\r\n      listOpen: !prevState.listOpen\r\n    }));\r\n  }\r\n\r\n  selectItem(selectedOption, id, stateKey) {\r\n    this.setState({ listOpen: false });\r\n    this.props.handleTraversalChange(selectedOption, id, stateKey);\r\n  }\r\n\r\n  render() {\r\n    const { options, title } = this.props;\r\n    const { listOpen } = this.state;\r\n    return (\r\n      <div className=\"dropdown-wrapper\">\r\n        <div className=\"dropdown-header\" onClick={() => this.toggleList()}>\r\n          <div className=\"dropdown-header-title\">\r\n            {title === \"Select Traversal\" ? `${title}` : `${title} Traversal`}\r\n          </div>\r\n          <div>\r\n            {listOpen ? (\r\n              <FontAwesome name=\"angle-up\" />\r\n            ) : (\r\n              <FontAwesome name=\"angle-down\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n        {listOpen && (\r\n          <ul className=\"dropdown-list\" onClick={e => e.stopPropagation()}>\r\n            {options.map(option => (\r\n              <li\r\n                className=\"dropdown-list-item\"\r\n                key={option.value}\r\n                onClick={() =>\r\n                  this.selectItem(option.value, option.id, option.key)\r\n                }\r\n              >\r\n                <span>{option.value} Traversal</span>\r\n                <span>{option.selected && <FontAwesome name=\"check\" />}</span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/*A tree data-structure which create a static binary tree\r\nThis is used to get expected traversal order given the tree structure\r\n*/\r\n\r\nfunction Node(val) {\r\n  this.value = val;\r\n  this.left = null;\r\n  this.right = null;\r\n}\r\n\r\nfunction Tree(rootNode) {\r\n  this.root = null;\r\n  this.visited = []; //keeps the sequence of the nodes in which they are visited\r\n\r\n  if (typeof rootNode !== \"undefined\") {\r\n    this.root = new Node(rootNode);\r\n  } else {\r\n    throw new Error(\"Enter valid root element. Root node can't be empty\");\r\n  }\r\n  /*Inserts a new node to the tree. if targetnode is provided then adds the newNode to its left/right based on the value of direction\r\n  provided as an argument and if not provided then set it as roots left or right child*/\r\n  this.add = function(value, dir, targetNode = null) {\r\n    const newNode = new Node(value);\r\n\r\n    if (targetNode === null) {\r\n      this.root[dir] = newNode;\r\n    } else {\r\n      const position = this.levelorderTraversal(targetNode); //returns the position of the targetNode\r\n      position[dir] = newNode;\r\n    }\r\n  };\r\n\r\n  /*performs level order traversal. If given any node as an argument then return that node's position else\r\n  updates the sequence of the visited nodes*/\r\n  this.levelorderTraversal = function(searchNode = -1) {\r\n    const queue = [];\r\n    let currentNode = this.root;\r\n    queue.push(currentNode);\r\n    if (this.visited.length > 0) this.visited = [];\r\n    while (queue.length > 0) {\r\n      currentNode = queue.shift();\r\n      if (currentNode !== null) {\r\n        if (searchNode === -1) {\r\n          this.visited.push(currentNode.value);\r\n        }\r\n        if (currentNode.value === searchNode && searchNode !== -1) {\r\n          return currentNode;\r\n        }\r\n        if (currentNode.left !== null) {\r\n          queue.push(currentNode.left);\r\n        }\r\n        if (currentNode.right !== null) {\r\n          queue.push(currentNode.right);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /*Recursively performs inorder traversal and updates the sequence of visited node*/\r\n  this.inorderTraversal = function(node = this.root) {\r\n    if (node === this.root && this.visited.length > 0) this.visited = [];\r\n    if (node !== null) {\r\n      this.inorderTraversal(node.left);\r\n      this.visited.push(node.value);\r\n      this.inorderTraversal(node.right);\r\n    }\r\n  };\r\n\r\n  /*Recursively performs preorder traversal and updates the sequence of visited node*/\r\n  this.preorderTraversal = function(node = this.root) {\r\n    if (node === this.root && this.visited.length > 0) this.visited = [];\r\n    if (node !== null) {\r\n      this.visited.push(node.value);\r\n      this.preorderTraversal(node.left);\r\n      this.preorderTraversal(node.right);\r\n    }\r\n  };\r\n\r\n  /*Recursively performs postorder traversal and updates the sequence of visited node*/\r\n  this.postorderTraversal = function(node = this.root) {\r\n    if (node === this.root && this.visited.length > 0) this.visited = [];\r\n    if (node !== null) {\r\n      this.postorderTraversal(node.left);\r\n      this.postorderTraversal(node.right);\r\n      this.visited.push(node.value);\r\n    }\r\n  };\r\n\r\n  this.getTraversalOrder = function() {\r\n    return this.visited;\r\n  };\r\n}\r\n\r\nexport default Tree;\r\n","import React, { Component } from \"react\";\n\nimport TreeDiagram from \"./components/TreeDiagram\";\nimport TransitionedList from \"./components/TransitionedList\";\nimport TraversalInfo from \"./components/TraversalInfo\";\n\nimport Dropdown from \"./components/util/Dropdown\";\nimport Tree from \"./components/util/Tree\";\n\nimport \"./styles/App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedTraversal: \"Select Traversal\",\n      traversalOrder: [], //it stores the expected sequence of node from tree structure\n      list: [], //store the nodes which got displayed on list/hightlighted on tree one by one\n      dropdownOptions: [\n        {\n          id: 0,\n          value: \"Postorder\",\n          selected: false,\n          key: \"dropdownOptions\"\n        },\n        {\n          id: 1,\n          value: \"Preorder\",\n          selected: false,\n          key: \"dropdownOptions\"\n        },\n        {\n          id: 2,\n          value: \"Inorder\",\n          selected: false,\n          key: \"dropdownOptions\"\n        },\n        {\n          id: 3,\n          value: \"Levelorder\",\n          selected: false,\n          key: \"dropdownOptions\"\n        }\n      ],\n      treeData: {\n        name: \"1\",\n        children: [\n          {\n            name: \"3\"\n          },\n          {\n            name: \"2\",\n            children: [\n              {\n                name: \"5\",\n                children: [\n                  {\n                    name: \"7\"\n                  },\n                  { name: \"6\" }\n                ]\n              },\n              {\n                name: \"4\"\n              }\n            ]\n          }\n        ]\n      }\n    };\n\n    this.tree = new Tree(\"1\");\n  }\n  //This will build the tree data-structure with these static values\n  componentDidMount() {\n    this.tree.add(\"2\", \"left\");\n    this.tree.add(\"3\", \"right\");\n    this.tree.add(\"4\", \"left\", \"2\");\n    this.tree.add(\"5\", \"right\", \"2\");\n    this.tree.add(\"6\", \"left\", \"5\");\n    this.tree.add(\"7\", \"right\", \"5\");\n  }\n\n  /*This menthod will display order of traversal one by one in delayed manner the \"if condition\" makes sure that\n  if user interrupts the traversal and selectes the new one before the old one gets completed the effect of old traversal\n  completely nullifies before new gets started*/\n\n  displayList = index => {\n    if (\n      index === this.state.list.length &&\n      index < this.state.traversalOrder.length\n    ) {\n      let tempList = [...this.state.list, this.state.traversalOrder[index]];\n      this.setState({ list: tempList }, () => {\n        setTimeout(() => {\n          this.displayList(index + 1);\n          this.animateTree(this.state.traversalOrder[index + 1]);\n        }, 1500);\n      });\n    }\n  };\n\n  /* as soon as the displayList method is called this method is triggered too to corresponding animate the tree node\n  along with the node which just got displayed on the list*/\n\n  animateTree = value => {\n    let data = this.state.treeData;\n    const nodeList = [this.state.treeData];\n    while (true) {\n      const current = nodeList.shift();\n      if (current) {\n        if (current.name === value) {\n          current.gProps = {\n            className: \"traversed-node\"\n          };\n          data = { ...data, current };\n          break;\n        }\n        if (current.children) {\n          current.children.forEach(child => nodeList.push(child));\n        }\n      } else {\n        break;\n      }\n    }\n    this.setState({ treeData: data });\n  };\n\n  /*This method gets the exepected order of nodes based on the tree as user selects the traversal and updates the state*/\n  updateTraversalOrder = () => {\n    const { selectedTraversal } = this.state;\n    if (selectedTraversal === \"Inorder\") {\n      this.tree.inorderTraversal();\n    } else if (selectedTraversal === \"Preorder\") {\n      this.tree.preorderTraversal();\n    } else if (selectedTraversal === \"Postorder\") {\n      this.tree.postorderTraversal();\n    } else {\n      this.tree.levelorderTraversal();\n    }\n\n    const traversalOrder = this.tree.getTraversalOrder();\n    this.setState({ traversalOrder }, () => {\n      this.displayList(0);\n      this.animateTree(this.state.traversalOrder[0]);\n    });\n  };\n\n  /*updates the state when user selectes new traversal and resets the tree and displayed list*/\n  handleTraversalChange = (selectedTraversal, id, key) => {\n    let temp = JSON.parse(JSON.stringify(this.state[key]));\n    temp.forEach(item => (item.selected = false));\n    temp[id].selected = true;\n    this.setState({\n      [key]: temp,\n      selectedTraversal\n    });\n    this.resetTree();\n  };\n\n  resetTree = () => {\n    this.setState(\n      {\n        list: [],\n        traversalOrder: [],\n        treeData: {\n          name: \"1\",\n          children: [\n            {\n              name: \"3\"\n            },\n            {\n              name: \"2\",\n              children: [\n                {\n                  name: \"5\",\n                  children: [\n                    {\n                      name: \"7\"\n                    },\n                    { name: \"6\" }\n                  ]\n                },\n                {\n                  name: \"4\"\n                }\n              ]\n            }\n          ]\n        }\n      },\n      () => {\n        setTimeout(() => {\n          this.updateTraversalOrder();\n        }, 1000);\n      }\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <section className=\"left-container\">\n          <div className=\"tree-diagram\">\n            <TreeDiagram data={this.state.treeData} />\n          </div>\n          <span className=\"subtitle\">Order of Traversal</span>\n          <div className=\"transition-list\">\n            <TransitionedList list={this.state.list} />\n          </div>\n        </section>\n        <section className=\"right-container\">\n          <div className=\"dropdown\">\n            <Dropdown\n              title={this.state.selectedTraversal}\n              handleTraversalChange={this.handleTraversalChange}\n              options={this.state.dropdownOptions}\n            />\n          </div>\n          <div className=\"traversal-info\">\n            <TraversalInfo selectedTraversal={this.state.selectedTraversal} />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}